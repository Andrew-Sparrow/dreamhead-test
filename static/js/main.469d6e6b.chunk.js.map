{"version":3,"sources":["services/api.js","const.js","components/layout/layout.jsx","components/hocs/with-layout.jsx","store/actions.js","util/util.js","store/places/places.js","store/root-reducer.js","store/places/selectors.js","components/tabs/tabs.jsx","components/main-empty/main-empty.jsx","components/main/main.jsx","components/not-found/not-found.jsx","components/loading-screen/loading-screen.jsx","browser-history.js","components/app/app.jsx","store/middlewares/redirect.js","reportWebVitals.js","index.js","store/api-actions.js"],"names":["token","localStorage","getItem","AppRoute","groupList","APIRoute","Layout","props","children","className","withLayout","Component","displayName","ActionType","changeGroup","createAction","isLoading","payload","isCommentSendedSuccessfully","isShowErrorMessage","errorMessageText","cityName","loadPlaces","places","removeNearbyPlaces","changeFavorite","comments","login","id","newPlace","resetFavorites","url","Util","offerFromServer","adaptedOfferForClient","Object","assign","host","avatarUrl","avatar_url","isPro","is_pro","isFavorite","is_favorite","isPremium","is_premium","maxAdults","max_adults","previewImage","preview_image","placesFromServer","map","place","adaptToClient","activeCity","filter","item","city","name","listLength","Array","fill","nanoid","newPlaces","index","findIndex","formatDate","dateString","Date","toLocaleDateString","year","month","createReducer","isDataLoaded","activeGroupName","builder","addCase","state","action","nearbyPlaces","isNearbyPlacesLoaded","getUpdatedPlaces","resetFavoriteStates","NameSpace","combineReducers","getContacts","getIsDataLoaded","getActiveGroupName","Tabs","useSelector","dispatch","useDispatch","handleTabClick","evt","preventDefault","currentTarget","dataset","group","to","onClick","MainEmpty","withLayoutMain","contacts","filteredContacts","getFilteredPlaces","length","withLayoutNotFound","style","margin","width","textAlign","LoadingScreen","browserHistory","createBrowserHistory","App","history","exact","path","redirect","_store","next","type","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","api","axiosInstance","axios","create","baseURL","timeout","headers","interceptors","response","use","getAxiosInstance","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","thunk","extraArgument","concat","_getState","get","data","adaptedPlacesToClient","adaptPlacesToClient","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.469d6e6b.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BACKEND_URL = 'https://7.react.pages.academy/six-cities';\nconst REQUEST_TIMEOUT = 5000;\n\nconst token = localStorage.getItem('token') !== null ? localStorage.getItem('token') : '';\n\nexport const getAxiosInstance = () => {\n  const axiosInstance = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n    headers: {\n      'x-token': token,\n    },\n  });\n\n  const onSuccess = (response) => response;\n\n  const onFail = () => {};\n\n  axiosInstance.interceptors.response.use(onSuccess, onFail);\n\n  return axiosInstance;\n};\n","export const AppRoute = {\n  MAIN: '/',\n};\n\nexport const MAX_COMMENTS_AMOUNT = 10;\n\nexport const groupList = [\n  'All',\n  'Favorites',\n  'Family',\n  'Work',\n];\n\nexport const APIRoute = {\n  HOTELS: '/hotels',\n  FAVORITE: '/favorite',\n  COMMENTS: '/comments',\n  LOGIN: '/login',\n  LOGOUT: '/logout',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Layout(props) {\n  const {children, className} = props;\n\n  return (\n    <div className={className}>\n      <header className=\"header\">\n        <div className=\"container\">\n          <div className=\"header__wrapper\">\n            <div className=\"header__left\">\n              <h2>Contacts</h2>\n            </div>\n          </div>\n        </div>\n      </header>\n      {children}\n    </ div>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.object,\n  className: PropTypes.string,\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from '../layout/layout';\n\nconst withLayout = (Component, className) =>\n  function wrapper(props) {\n    return (\n      <Layout className={className}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n\nwithLayout.displayName = 'withLayout';\n\nexport default withLayout;\n","import {createAction} from '@reduxjs/toolkit';\r\n\r\nexport const ActionType = {\r\n  CHANGE_GROUP: 'contacts/changeGroup',\r\n  LOAD_CONTACTS: 'contacts/loadContacts',\r\n  REMOVE_NEARBY_PLACES: 'places/removeNearbyPlaces',\r\n  CHANGE_FAVORITE: 'places/isFavorite',\r\n  LOAD_COMMENTS: 'comments/loadComments',\r\n  REMOVE_COMMENTS: 'comments/removeComments',\r\n  CHANGE_LOGIN: 'user/changeLogin',\r\n  LOGOUT: 'user/logout',\r\n  CHANGE_LOADING_COMMENT_PROCESS_STATUS: 'comment/changeLoadingCommentProcessStatus',\r\n  SHOW_COMMENT_ERROR_MESSAGE: 'comment/showErrorCommentFormMessage',\r\n  SEND_COMMENT: 'comment/sendComment',\r\n  SEND_COMMENT_RATING: 'comment/sendCommentRating',\r\n  CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS: 'comment/changeCommentSendedSuccessfulyStatus',\r\n  RESET_FAVORITES: 'places/resetFavorites',\r\n  REDIRECT_TO_ROUTE: 'places/redirectToRoute',\r\n};\r\n\r\nexport const changeLoadingCommentProcessStatus = createAction(\r\n  ActionType.CHANGE_LOADING_COMMENT_PROCESS_STATUS,\r\n  (isLoading) => ({payload: isLoading}),\r\n);\r\n\r\nexport const changeIsCommentSendedSuccessfullyStatus = createAction(\r\n  ActionType.CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS,\r\n  (isCommentSendedSuccessfully) => ({payload: isCommentSendedSuccessfully}),\r\n);\r\n\r\nexport const showErrorCommentFormMessage = createAction(\r\n  ActionType.SHOW_COMMENT_ERROR_MESSAGE,\r\n  (isShowErrorMessage, errorMessageText) => ({payload: {isShowErrorMessage, errorMessageText}}),\r\n);\r\n\r\nexport const changeGroup = createAction(\r\n  ActionType.CHANGE_GROUP,\r\n  (cityName) => ({payload: cityName}),\r\n);\r\n\r\nexport const loadPlaces = createAction(\r\n  ActionType.LOAD_CONTACTS,\r\n  (places) => ({payload: places}),\r\n);\r\n\r\nexport const removeNearbyPlaces = createAction(ActionType.REMOVE_NEARBY_PLACES);\r\n\r\nexport const loadComments = createAction(\r\n  ActionType.LOAD_COMMENTS,\r\n  (comments) => ({payload: comments}),\r\n);\r\n\r\nexport const removeComments = createAction(ActionType.REMOVE_COMMENTS);\r\n\r\nexport const changeLogin = createAction(\r\n  ActionType.CHANGE_LOGIN,\r\n  (login) => ({payload: login}),\r\n);\r\n\r\nexport const changeFavorite = createAction(\r\n  ActionType.CHANGE_FAVORITE,\r\n  (id, newPlace) => ({payload: {id, newPlace}}),\r\n);\r\n\r\nexport const logout = createAction(ActionType.LOGOUT);\r\n\r\nexport const resetFavorites = createAction(\r\n  ActionType.RESET_FAVORITES,\r\n  (places) => ({payload: places}),\r\n);\r\n\r\nexport const redirectToRoute = createAction(\r\n  ActionType.REDIRECT_TO_ROUTE,\r\n  (url) => ({payload: url}),\r\n);\r\n","import nanoid from 'nanoid';\r\n\r\nclass Util {\r\n  static adaptToClient(offerFromServer) {\r\n    const adaptedOfferForClient = Object.assign(\r\n      {},\r\n      offerFromServer,\r\n      {\r\n        host: Object.assign(\r\n          {},\r\n          offerFromServer.host,\r\n          {\r\n            avatarUrl: offerFromServer.host.avatar_url,\r\n            isPro: offerFromServer.host.is_pro,\r\n          },\r\n        ),\r\n        isFavorite: offerFromServer.is_favorite,\r\n        isPremium: offerFromServer.is_premium,\r\n        maxAdults: offerFromServer.max_adults,\r\n        previewImage: offerFromServer.preview_image,\r\n      },\r\n    );\r\n\r\n    // Ненужные ключи мы удаляем\r\n    delete adaptedOfferForClient.host.avatar_url;\r\n    delete adaptedOfferForClient.host.is_pro;\r\n\r\n    delete adaptedOfferForClient.is_favorite;\r\n    delete adaptedOfferForClient.is_premium;\r\n    delete adaptedOfferForClient.max_adults;\r\n    delete adaptedOfferForClient.preview_image;\r\n\r\n    return adaptedOfferForClient;\r\n  }\r\n\r\n  static adaptPlacesToClient(placesFromServer) {\r\n    return placesFromServer.map((place) => this.adaptToClient(place));\r\n  }\r\n\r\n  static getFilteredPlaces(activeCity, places) {\r\n    let filteredPlaces = [];\r\n    filteredPlaces = places.filter((item) => item.city.name === activeCity);\r\n    return filteredPlaces;\r\n  }\r\n\r\n  static formatDate = (dateString) => {\r\n    const DATE_OPTIONS = {year: 'numeric', month: 'short'};\r\n\r\n    return (new Date(dateString)).toLocaleDateString('en-US', DATE_OPTIONS);\r\n  }\r\n\r\n  static generateIdKeys(listLength) {\r\n    const list = new Array(listLength).fill('');\r\n    const generatedIdList = list.map(() => nanoid(10));\r\n    return generatedIdList;\r\n  }\r\n\r\n  static getUpdatedPlaces(id, places, newPlace) {\r\n    const newPlaces = [...places];\r\n    const index = newPlaces.findIndex((place) => place.id === id);\r\n    newPlaces[index].isFavorite = newPlace.isFavorite;\r\n    return newPlaces;\r\n  }\r\n\r\n  static resetFavoriteStates(places) {\r\n    return places.map((place) => {\r\n      place = {...place, isFavorite: false};\r\n      return place;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Util;\r\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport Util from '../../util/util';\r\n\r\nimport {\r\n  changeGroup,\r\n  loadPlaces,\r\n  removeNearbyPlaces,\r\n  changeFavorite,\r\n  resetFavorites\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  places: [],\r\n  isDataLoaded: false,\r\n  activeGroupName: 'All',\r\n};\r\n\r\nconst places = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(changeGroup, (state, action) => {\r\n      state.activeGroupName = action.payload;\r\n    })\r\n    .addCase(loadPlaces, (state, action) => {\r\n      state.places = action.payload;\r\n      state.isDataLoaded = true;\r\n    })\r\n    .addCase(removeNearbyPlaces, (state) => {\r\n      state.nearbyPlaces = [];\r\n      state.isNearbyPlacesLoaded = false;\r\n    })\r\n    .addCase(changeFavorite, (state, action) => {\r\n      state.places = Util.getUpdatedPlaces(action.payload.id, state.places, action.payload.newPlace);\r\n    })\r\n    .addCase(resetFavorites, (state, action) => {\r\n      state.places = Util.resetFavoriteStates(action.payload);\r\n    });\r\n});\r\n\r\nexport {places};\r\n","import {combineReducers} from 'redux';\nimport {places} from './places/places';\n\nexport const NameSpace = {\n  CONTACTS: 'CONTACTS',\n};\n\nexport default combineReducers({\n  [NameSpace.CONTACTS]: places,\n});\n","import {NameSpace} from '../root-reducer';\n\nexport const getContacts = (state) => state[NameSpace.CONTACTS].places;\nexport const getIsDataLoaded = (state) => state[NameSpace.CONTACTS].isDataLoaded;\nexport const getActiveGroupName = (state) => state[NameSpace.CONTACTS].activeGroupName;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {groupList} from '../../const';\nimport {changeGroup} from '../../store/actions';\nimport {getActiveGroupName} from '../../store/places/selectors';\n\nfunction Tabs(props) {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const dispatch = useDispatch();\n\n  const handleTabClick = (evt) => {\n    evt.preventDefault();\n    dispatch(changeGroup(evt.currentTarget.dataset.city));\n  };\n\n  return (\n    <div className=\"tabs\">\n      <section className=\"locations container\">\n        <ul className=\"locations__list tabs__list\">\n          {groupList.map((group) => (\n            <li className=\"locations__item\" key={group}>\n              <Link\n                data-city={group}\n                className={`locations__item-link tabs__item ${ group === activeGroupName && 'tabs__item--active' }`}\n                to=\"#\"\n                onClick={handleTabClick}\n              >\n                <span>{group}</span>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MainEmpty(props) {\n  const {activeGroupName} = props;\n\n  return (\n    <div className=\"cities\">\n      <div className=\"cities__places-container cities__places-container--empty container\">\n        <section className=\"cities__no-places\">\n          <div className=\"cities__status-wrapper tabs__content\">\n            <b className=\"cities__status\">No contacts available</b>\n            <p className=\"cities__status-description\">We could not find any contacts available at the moment in \"{activeGroupName}\" group</p>\n          </div>\n        </section>\n        <div className=\"cities__right-section\" />\n      </div>\n    </div>\n  );\n}\n\nMainEmpty.propTypes = {\n  activeGroupName: PropTypes.string.isRequired,\n};\n\nexport default MainEmpty;\n","import {React} from 'react';\nimport {useSelector} from 'react-redux';\n\n// import RoomList from '../room-list/room-list';\nimport withLayout from '../hocs/with-layout';\nimport Tabs from '../tabs/tabs';\nimport Util from '../../util/util';\nimport MainEmpty from '../main-empty/main-empty';\nimport {getContacts, getActiveGroupName} from '../../store/places/selectors';\n\nfunction Main() {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const contacts = useSelector(getContacts);\n\n  const filteredContacts = Util.getFilteredPlaces(activeGroupName, contacts);\n\n  return (\n    <main className=\"page__main page__main--index\">\n      <h1 className=\"visually-hidden\">Cities</h1>\n      <Tabs />\n      {\n        filteredContacts.length === 0\n          ? <MainEmpty activeGroupName={activeGroupName}/>\n          : (\n            <div className=\"cities\">\n              <div className=\"cities__places-container container\">\n                <section className=\"cities__places places\">\n                  <h2 className=\"visually-hidden\">Contacts</h2>\n                  <b className=\"places__found\">{filteredContacts.length} places to stay in {activeGroupName}</b>\n                  {/* <RoomList places={filteredPlaces} /> */}\n                </section>\n              </div>\n            </div>\n          )\n      }\n    </main>\n  );\n}\n\nconst withLayoutMain = withLayout(Main);\nexport default withLayoutMain;\n","import React from 'react';\nimport withLayout from '../hocs/with-layout';\n\nfunction NotFound() {\n  return (\n    <div style={{margin: 'auto', width: '200px'}}>\n      <h1 style={{textAlign: 'center'}}>404</h1>\n      <h2>Page Not Found</h2>\n    </div>\n  );\n}\n\nconst withLayoutNotFound = withLayout(NotFound);\nexport default withLayoutNotFound;\n","import React from 'react';\n\nfunction LoadingScreen() {\n  return (\n    <p>Loading...</p>\n  );\n}\n\nexport default LoadingScreen;\n","import {createBrowserHistory} from 'history';\n\nconst browserHistory = createBrowserHistory();\n\nexport default browserHistory;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Switch, Route, Router as BrowserRouter} from 'react-router-dom';\n\nimport {AppRoute} from '../../const';\nimport Main from '../main/main';\nimport Error from '../not-found/not-found';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport browserHistory from '../../browser-history';\nimport {getIsDataLoaded} from '../../store/places/selectors';\n\nfunction App() {\n  const isDataLoaded = useSelector(getIsDataLoaded);\n\n  if (!isDataLoaded) {\n    return (\n      <LoadingScreen />\n    );\n  }\n\n  return (\n    <BrowserRouter history={browserHistory}>\n      <Switch>\n        <Route exact path={AppRoute.MAIN}>\n          <Main className=\"page page--gray page--index\" />\n        </Route>\n        <Route>\n          <Error />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import browserHistory from '../../browser-history';\nimport {ActionType} from '../actions';\n\nexport const redirect = (_store) => (next) => (action) => {\n  if (action.type === ActionType.REDIRECT_TO_ROUTE) {\n    browserHistory.push(action.payload);\n  }\n\n  return next(action);\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {configureStore} from '@reduxjs/toolkit';\nimport {Provider} from 'react-redux';\n\nimport {getAxiosInstance} from './services/api';\nimport App from './components/app/app';\nimport rootReducer from './store/root-reducer';\nimport {fetchContactsList} from './store/api-actions';\nimport {redirect} from './store/middlewares/redirect';\nimport reportWebVitals from './reportWebVitals';\n\nconst api = getAxiosInstance();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: api,\n      },\n    }).concat(redirect),\n});\n\nstore.dispatch(fetchContactsList());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\r\n  changeLoadingCommentProcessStatus,\r\n  changeIsCommentSendedSuccessfullyStatus,\r\n  showErrorCommentFormMessage,\r\n  loadPlaces,\r\n  loadComments,\r\n  changeLogin,\r\n  changeFavorite,\r\n  logout as userLogout,\r\n  redirectToRoute\r\n} from './actions';\r\n\r\nimport {APIRoute, AppRoute} from '../const';\r\nimport Util from '../util/util';\r\n\r\nexport const fetchContactsList = () => (dispatch, _getState, api) => (\r\n  api.get(APIRoute.HOTELS)\r\n    .then(({data}) => {\r\n      const adaptedPlacesToClient = Util.adaptPlacesToClient(data);\r\n      dispatch(loadPlaces(adaptedPlacesToClient));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const fetchCommentsList = (id) => (dispatch, _getState, api) => (\r\n  api.get(`${APIRoute.COMMENTS }/${id}`)\r\n    .then((info) => {\r\n      dispatch(loadComments(info.data));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const addToFavorite = (id, isFavorite) => (dispatch, _getState, api) => (\r\n  api.post(`${APIRoute.FAVORITE }/${id}/${isFavorite ? 1 : 0}`)\r\n    .then((info) => {\r\n      dispatch(changeFavorite(id, info.data));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const login = ({login: email, password}) => (dispatch, _getState, api) => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('login');\r\n  api.post(APIRoute.LOGIN, {email, password})\r\n    .then((info) => {\r\n      localStorage.setItem('token', info.data.token);\r\n      localStorage.setItem('login', info.data.email);\r\n      dispatch(changeLogin(info.data.email));\r\n      dispatch(redirectToRoute(AppRoute.MAIN));\r\n    })\r\n    .catch((err) => {});\r\n};\r\n\r\nexport const sendComment = (id, comment, rating) => (dispatch, _getState, api) => {\r\n  dispatch(changeLoadingCommentProcessStatus(true));\r\n\r\n  api.post(`${APIRoute.COMMENTS}/${id}`, {comment, rating})\r\n    .then((info) => {\r\n      dispatch(loadComments(info.data));\r\n      dispatch(changeLoadingCommentProcessStatus(false));\r\n      dispatch(showErrorCommentFormMessage(false));\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(true));\r\n      /*\r\n      this additional bottom line was made for clean up a comment form\r\n      and establish \"isCommentFormSendedSuccessfully\" to \"false\"\r\n      to fix problem with save text in comment form after network error\r\n       */\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(showErrorCommentFormMessage(true, err.message));\r\n      dispatch(changeLoadingCommentProcessStatus(false));\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\r\n    });\r\n};\r\n\r\nexport const logout = () => (dispatch, _getState, api) => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('login');\r\n\r\n  api.delete(APIRoute.LOGOUT)\r\n    .then(() => {\r\n      dispatch(userLogout());\r\n    });\r\n};\r\n"],"sourceRoot":""}