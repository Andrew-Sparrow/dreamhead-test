{"version":3,"sources":["services/api.js","const.js","components/contact/contact.jsx","components/contact/contact.prop.js","components/contact-list/contact-list.jsx","components/layout/layout.jsx","components/hocs/with-layout.jsx","store/actions.js","util/util.js","store/contacts/contacts.js","store/root-reducer.js","store/contacts/selectors.js","components/tabs/tabs.jsx","components/main-empty/main-empty.jsx","components/main/main.jsx","components/not-found/not-found.jsx","components/loading-screen/loading-screen.jsx","browser-history.js","components/app/app.jsx","store/middlewares/redirect.js","reportWebVitals.js","index.js","store/api-actions.js"],"names":["token","localStorage","getItem","AppRoute","groupList","groupNames","APIRoute","Contact","PropTypes","shape","number","isRequired","string","oneOfType","oneOf","ContactList","props","contacts","onListItemHover","className","map","contact","id","price","title","isPremium","isFavorite","type","rating","previewImage","Layout","children","withLayout","Component","displayName","ActionType","changeGroup","createAction","isLoading","payload","isCommentSendedSuccessfully","isShowErrorMessage","errorMessageText","groupName","loadContacts","removeNearbyPlaces","changeFavorite","comments","login","newPlace","resetFavorites","places","url","Util","offerFromServer","adaptedOfferForClient","Object","assign","host","avatarUrl","avatar_url","isPro","is_pro","is_favorite","is_premium","maxAdults","max_adults","preview_image","placesFromServer","place","adaptToClient","activeGroup","filter","item","group","listLength","Array","fill","nanoid","newPlaces","index","findIndex","formatDate","dateString","Date","toLocaleDateString","year","month","createReducer","isDataLoaded","activeGroupName","builder","addCase","state","action","nearbyPlaces","isNearbyPlacesLoaded","getUpdatedPlaces","resetFavoriteStates","NameSpace","combineReducers","getContacts","getIsDataLoaded","getActiveGroupName","Tabs","useSelector","dispatch","useDispatch","handleTabClick","evt","preventDefault","currentTarget","dataset","city","to","onClick","MainEmpty","withLayoutMain","filteredContacts","getFilteredContacts","length","withLayoutNotFound","style","margin","width","textAlign","LoadingScreen","browserHistory","createBrowserHistory","App","history","exact","path","redirect","_store","next","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","api","axiosInstance","axios","create","baseURL","timeout","headers","interceptors","response","use","getAxiosInstance","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","thunk","extraArgument","concat","_getState","get","data","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16e155fe.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BACKEND_URL = 'https://heroku-dreamhead-api.herokuapp.com';\nconst REQUEST_TIMEOUT = 5000;\n\nconst token = localStorage.getItem('token') !== null ? localStorage.getItem('token') : '';\n\nexport const getAxiosInstance = () => {\n  const axiosInstance = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n    headers: {\n      'x-token': token,\n    },\n  });\n\n  const onSuccess = (response) => response;\n\n  const onFail = () => {};\n\n  axiosInstance.interceptors.response.use(onSuccess, onFail);\n\n  return axiosInstance;\n};\n","export const AppRoute = {\n  MAIN: '/',\n};\n\nexport const MAX_COMMENTS_AMOUNT = 10;\n\nexport const groupList = [\n  'All',\n  'Favorites',\n  'Family',\n  'Work',\n];\n\nexport const groupNames = {\n  ALL: 'All',\n  FAVORITES: 'Favorites',\n  FAMILY: 'Family',\n  WORK: 'Work'\n}\n\nexport const APIRoute = {\n  CONTACTS: '/contacts',\n  FAVORITE: '/favorite',\n  COMMENTS: '/comments',\n  LOGIN: '/login',\n  LOGOUT: '/logout',\n};\n","import React from 'react';\n\nfunction Contact() {\n  return (\n    <div>\n      <p>room</p>\n    </div>\n  );\n}\n\nexport default Contact;\n","import PropTypes from 'prop-types';\n\nexport default PropTypes.shape({\n  'id': PropTypes.number.isRequired,\n  'name': PropTypes.string.isRequired,\n  'lastName': PropTypes.string.isRequired,\n  \"phone\": PropTypes.string,\n  \"email\": PropTypes.string,\n  \"group\": PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.oneOf([null]),\n  ])\n});\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Contact from '../contact/contact';\nimport contactProp from '../contact/contact.prop';\n\nfunction ContactList(props) {\n  const {contacts, onListItemHover} = props;\n\n  return (\n    <div className=\"cities__places-list places__list tabs__content\">\n      {contacts.map((contact) => (\n        <Contact\n          key={contact.id}\n          id={contact.id}\n          price={contact.price}\n          onListItemHover={onListItemHover}\n          title={contact.title}\n          isPremium={contact.isPremium}\n          isFavorite={contact.isFavorite}\n          type={contact.type}\n          rating={contact.rating}\n          previewImage={contact.previewImage}\n        />\n      ))}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contact: PropTypes.arrayOf(contactProp),\n  onListItemHover: PropTypes.func,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Layout(props) {\n  const {children, className} = props;\n\n  return (\n    <div className={className}>\n      <header className=\"header\">\n        <div className=\"container\">\n          <div className=\"header__wrapper\">\n            <div className=\"header__left\">\n              <h2>Contacts</h2>\n            </div>\n          </div>\n        </div>\n      </header>\n      {children}\n    </ div>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.object,\n  className: PropTypes.string,\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from '../layout/layout';\n\nconst withLayout = (Component, className) =>\n  function wrapper(props) {\n    return (\n      <Layout className={className}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n\nwithLayout.displayName = 'withLayout';\n\nexport default withLayout;\n","import {createAction} from '@reduxjs/toolkit';\r\n\r\nexport const ActionType = {\r\n  CHANGE_GROUP: 'contacts/changeGroup',\r\n  LOAD_CONTACTS: 'contacts/loadContacts',\r\n  REMOVE_NEARBY_PLACES: 'places/removeNearbyPlaces',\r\n  CHANGE_FAVORITE: 'places/isFavorite',\r\n  LOAD_COMMENTS: 'comments/loadComments',\r\n  REMOVE_COMMENTS: 'comments/removeComments',\r\n  CHANGE_LOGIN: 'user/changeLogin',\r\n  LOGOUT: 'user/logout',\r\n  CHANGE_LOADING_COMMENT_PROCESS_STATUS: 'comment/changeLoadingCommentProcessStatus',\r\n  SHOW_COMMENT_ERROR_MESSAGE: 'comment/showErrorCommentFormMessage',\r\n  SEND_COMMENT: 'comment/sendComment',\r\n  SEND_COMMENT_RATING: 'comment/sendCommentRating',\r\n  CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS: 'comment/changeCommentSendedSuccessfulyStatus',\r\n  RESET_FAVORITES: 'places/resetFavorites',\r\n  REDIRECT_TO_ROUTE: 'places/redirectToRoute',\r\n};\r\n\r\nexport const changeLoadingCommentProcessStatus = createAction(\r\n  ActionType.CHANGE_LOADING_COMMENT_PROCESS_STATUS,\r\n  (isLoading) => ({payload: isLoading}),\r\n);\r\n\r\nexport const changeIsCommentSendedSuccessfullyStatus = createAction(\r\n  ActionType.CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS,\r\n  (isCommentSendedSuccessfully) => ({payload: isCommentSendedSuccessfully}),\r\n);\r\n\r\nexport const showErrorCommentFormMessage = createAction(\r\n  ActionType.SHOW_COMMENT_ERROR_MESSAGE,\r\n  (isShowErrorMessage, errorMessageText) => ({payload: {isShowErrorMessage, errorMessageText}}),\r\n);\r\n\r\nexport const changeGroup = createAction(\r\n  ActionType.CHANGE_GROUP,\r\n  (groupName) => ({payload: groupName}),\r\n);\r\n\r\nexport const loadContacts = createAction(\r\n  ActionType.LOAD_CONTACTS,\r\n  (contacts) => ({payload: contacts}),\r\n);\r\n\r\nexport const removeNearbyPlaces = createAction(ActionType.REMOVE_NEARBY_PLACES);\r\n\r\nexport const loadComments = createAction(\r\n  ActionType.LOAD_COMMENTS,\r\n  (comments) => ({payload: comments}),\r\n);\r\n\r\nexport const removeComments = createAction(ActionType.REMOVE_COMMENTS);\r\n\r\nexport const changeLogin = createAction(\r\n  ActionType.CHANGE_LOGIN,\r\n  (login) => ({payload: login}),\r\n);\r\n\r\nexport const changeFavorite = createAction(\r\n  ActionType.CHANGE_FAVORITE,\r\n  (id, newPlace) => ({payload: {id, newPlace}}),\r\n);\r\n\r\nexport const logout = createAction(ActionType.LOGOUT);\r\n\r\nexport const resetFavorites = createAction(\r\n  ActionType.RESET_FAVORITES,\r\n  (places) => ({payload: places}),\r\n);\r\n\r\nexport const redirectToRoute = createAction(\r\n  ActionType.REDIRECT_TO_ROUTE,\r\n  (url) => ({payload: url}),\r\n);\r\n","import nanoid from 'nanoid';\r\nimport {groupNames} from '../const';\r\n\r\nclass Util {\r\n  static adaptToClient(offerFromServer) {\r\n    const adaptedOfferForClient = Object.assign(\r\n      {},\r\n      offerFromServer,\r\n      {\r\n        host: Object.assign(\r\n          {},\r\n          offerFromServer.host,\r\n          {\r\n            avatarUrl: offerFromServer.host.avatar_url,\r\n            isPro: offerFromServer.host.is_pro,\r\n          },\r\n        ),\r\n        isFavorite: offerFromServer.is_favorite,\r\n        isPremium: offerFromServer.is_premium,\r\n        maxAdults: offerFromServer.max_adults,\r\n        previewImage: offerFromServer.preview_image,\r\n      },\r\n    );\r\n\r\n    // Ненужные ключи мы удаляем\r\n    delete adaptedOfferForClient.host.avatar_url;\r\n    delete adaptedOfferForClient.host.is_pro;\r\n\r\n    delete adaptedOfferForClient.is_favorite;\r\n    delete adaptedOfferForClient.is_premium;\r\n    delete adaptedOfferForClient.max_adults;\r\n    delete adaptedOfferForClient.preview_image;\r\n\r\n    return adaptedOfferForClient;\r\n  }\r\n\r\n  static adaptPlacesToClient(placesFromServer) {\r\n    return placesFromServer.map((place) => this.adaptToClient(place));\r\n  }\r\n\r\n  static getFilteredContacts(activeGroup, contacts) {\r\n    let filteredContacts = [];\r\n    if (activeGroup === groupNames.ALL) {\r\n      return contacts;\r\n    }\r\n    filteredContacts = contacts.filter((item) => item.group === activeGroup);\r\n    return filteredContacts;\r\n  }\r\n\r\n  static formatDate = (dateString) => {\r\n    const DATE_OPTIONS = {year: 'numeric', month: 'short'};\r\n\r\n    return (new Date(dateString)).toLocaleDateString('en-US', DATE_OPTIONS);\r\n  }\r\n\r\n  static generateIdKeys(listLength) {\r\n    const list = new Array(listLength).fill('');\r\n    const generatedIdList = list.map(() => nanoid(10));\r\n    return generatedIdList;\r\n  }\r\n\r\n  static getUpdatedPlaces(id, places, newPlace) {\r\n    const newPlaces = [...places];\r\n    const index = newPlaces.findIndex((place) => place.id === id);\r\n    newPlaces[index].isFavorite = newPlace.isFavorite;\r\n    return newPlaces;\r\n  }\r\n\r\n  static resetFavoriteStates(places) {\r\n    return places.map((place) => {\r\n      place = {...place, isFavorite: false};\r\n      return place;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Util;\r\n","import {createReducer} from '@reduxjs/toolkit';\r\nimport Util from '../../util/util';\r\n\r\nimport {\r\n  changeGroup,\r\n  loadContacts,\r\n  removeNearbyPlaces,\r\n  changeFavorite,\r\n  resetFavorites\r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  isDataLoaded: false,\r\n  activeGroupName: 'All',\r\n};\r\n\r\nconst contacts = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(changeGroup, (state, action) => {\r\n      state.activeGroupName = action.payload;\r\n    })\r\n    .addCase(loadContacts, (state, action) => {\r\n      state.contacts = action.payload;\r\n      state.isDataLoaded = true;\r\n    })\r\n    .addCase(removeNearbyPlaces, (state) => {\r\n      state.nearbyPlaces = [];\r\n      state.isNearbyPlacesLoaded = false;\r\n    })\r\n    .addCase(changeFavorite, (state, action) => {\r\n      state.places = Util.getUpdatedPlaces(action.payload.id, state.places, action.payload.newPlace);\r\n    })\r\n    .addCase(resetFavorites, (state, action) => {\r\n      state.places = Util.resetFavoriteStates(action.payload);\r\n    });\r\n});\r\n\r\nexport {contacts};\r\n","import {combineReducers} from 'redux';\nimport {contacts} from './contacts/contacts';\n\nexport const NameSpace = {\n  CONTACTS: 'CONTACTS',\n};\n\nexport default combineReducers({\n  [NameSpace.CONTACTS]: contacts,\n});\n","import {NameSpace} from '../root-reducer';\n\nexport const getContacts = (state) => state[NameSpace.CONTACTS].contacts;\nexport const getIsDataLoaded = (state) => state[NameSpace.CONTACTS].isDataLoaded;\nexport const getActiveGroupName = (state) => state[NameSpace.CONTACTS].activeGroupName;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {groupList} from '../../const';\nimport {changeGroup} from '../../store/actions';\nimport {getActiveGroupName} from '../../store/contacts/selectors';\n\nfunction Tabs(props) {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const dispatch = useDispatch();\n\n  const handleTabClick = (evt) => {\n    evt.preventDefault();\n    dispatch(changeGroup(evt.currentTarget.dataset.city));\n  };\n\n  return (\n    <div className=\"tabs\">\n      <section className=\"locations container\">\n        <ul className=\"locations__list tabs__list\">\n          {groupList.map((group) => (\n            <li className=\"locations__item\" key={group}>\n              <Link\n                data-city={group}\n                className={`locations__item-link tabs__item ${ group === activeGroupName && 'tabs__item--active' }`}\n                to=\"#\"\n                onClick={handleTabClick}\n              >\n                <span>{group}</span>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MainEmpty(props) {\n  const {activeGroupName} = props;\n\n  return (\n    <div className=\"cities\">\n      <div className=\"cities__places-container cities__places-container--empty container\">\n        <section className=\"cities__no-places\">\n          <div className=\"cities__status-wrapper tabs__content\">\n            <b className=\"cities__status\">No contacts available</b>\n            <p className=\"cities__status-description\">We could not find any contacts available at the moment in \"{activeGroupName}\" group</p>\n          </div>\n        </section>\n        <div className=\"cities__right-section\" />\n      </div>\n    </div>\n  );\n}\n\nMainEmpty.propTypes = {\n  activeGroupName: PropTypes.string.isRequired,\n};\n\nexport default MainEmpty;\n","import {React} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport ContactList from '../contact-list/contact-list';\nimport withLayout from '../hocs/with-layout';\nimport Tabs from '../tabs/tabs';\nimport Util from '../../util/util';\nimport MainEmpty from '../main-empty/main-empty';\nimport {getContacts, getActiveGroupName} from '../../store/contacts/selectors';\n\nfunction Main() {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const contacts = useSelector(getContacts);\n\n  const filteredContacts = Util.getFilteredContacts(activeGroupName, contacts);\n\n  return (\n    <main className=\"page__main page__main--index\">\n      <h1 className=\"visually-hidden\">Cities</h1>\n      <Tabs />\n      {\n        filteredContacts.length === 0\n          ? <MainEmpty activeGroupName={activeGroupName}/>\n          : (\n            <div className=\"cities\">\n              <div className=\"cities__places-container container\">\n                <section className=\"cities__places places\">\n                  <h2 className=\"visually-hidden\">Contacts</h2>\n                  <b className=\"places__found\">{filteredContacts.length} contacts in `{activeGroupName}` group</b>\n                  <ContactList contacts={filteredContacts} />\n                </section>\n              </div>\n            </div>\n          )\n      }\n    </main>\n  );\n}\n\nconst withLayoutMain = withLayout(Main);\nexport default withLayoutMain;\n","import React from 'react';\nimport withLayout from '../hocs/with-layout';\n\nfunction NotFound() {\n  return (\n    <div style={{margin: 'auto', width: '200px'}}>\n      <h1 style={{textAlign: 'center'}}>404</h1>\n      <h2>Page Not Found</h2>\n    </div>\n  );\n}\n\nconst withLayoutNotFound = withLayout(NotFound);\nexport default withLayoutNotFound;\n","import React from 'react';\n\nfunction LoadingScreen() {\n  return (\n    <p>Loading...</p>\n  );\n}\n\nexport default LoadingScreen;\n","import {createBrowserHistory} from 'history';\n\nconst browserHistory = createBrowserHistory();\n\nexport default browserHistory;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Switch, Route, Router as BrowserRouter} from 'react-router-dom';\n\nimport {AppRoute} from '../../const';\nimport Main from '../main/main';\nimport Error from '../not-found/not-found';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport browserHistory from '../../browser-history';\nimport {getIsDataLoaded} from '../../store/contacts/selectors';\n\nfunction App() {\n  const isDataLoaded = useSelector(getIsDataLoaded);\n\n  if (!isDataLoaded) {\n    return (\n      <LoadingScreen />\n    );\n  }\n\n  return (\n    <BrowserRouter history={browserHistory}>\n      <Switch>\n        <Route exact path={AppRoute.MAIN}>\n          <Main className=\"page page--gray page--index\" />\n        </Route>\n        <Route>\n          <Error />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import browserHistory from '../../browser-history';\nimport {ActionType} from '../actions';\n\nexport const redirect = (_store) => (next) => (action) => {\n  if (action.type === ActionType.REDIRECT_TO_ROUTE) {\n    browserHistory.push(action.payload);\n  }\n\n  return next(action);\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {configureStore} from '@reduxjs/toolkit';\nimport {Provider} from 'react-redux';\n\nimport {getAxiosInstance} from './services/api';\nimport App from './components/app/app';\nimport rootReducer from './store/root-reducer';\nimport {fetchContactsList} from './store/api-actions';\nimport {redirect} from './store/middlewares/redirect';\nimport reportWebVitals from './reportWebVitals';\n\nconst api = getAxiosInstance();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: api,\n      },\n    }).concat(redirect),\n});\n\nstore.dispatch(fetchContactsList());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\r\n  changeLoadingCommentProcessStatus,\r\n  changeIsCommentSendedSuccessfullyStatus,\r\n  showErrorCommentFormMessage,\r\n  loadContacts,\r\n  loadComments,\r\n  changeLogin,\r\n  changeFavorite,\r\n  logout as userLogout,\r\n  redirectToRoute\r\n} from './actions';\r\n\r\nimport {APIRoute, AppRoute} from '../const';\r\n\r\nexport const fetchContactsList = () => (dispatch, _getState, api) => (\r\n  api.get(APIRoute.CONTACTS)\r\n    .then(({data}) => {\r\n      dispatch(loadContacts(data));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const fetchCommentsList = (id) => (dispatch, _getState, api) => (\r\n  api.get(`${APIRoute.COMMENTS }/${id}`)\r\n    .then((info) => {\r\n      dispatch(loadComments(info.data));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const addToFavorite = (id, isFavorite) => (dispatch, _getState, api) => (\r\n  api.post(`${APIRoute.FAVORITE }/${id}/${isFavorite ? 1 : 0}`)\r\n    .then((info) => {\r\n      dispatch(changeFavorite(id, info.data));\r\n    })\r\n    .catch((err) => {})\r\n);\r\n\r\nexport const login = ({login: email, password}) => (dispatch, _getState, api) => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('login');\r\n  api.post(APIRoute.LOGIN, {email, password})\r\n    .then((info) => {\r\n      localStorage.setItem('token', info.data.token);\r\n      localStorage.setItem('login', info.data.email);\r\n      dispatch(changeLogin(info.data.email));\r\n      dispatch(redirectToRoute(AppRoute.MAIN));\r\n    })\r\n    .catch((err) => {});\r\n};\r\n\r\nexport const sendComment = (id, comment, rating) => (dispatch, _getState, api) => {\r\n  dispatch(changeLoadingCommentProcessStatus(true));\r\n\r\n  api.post(`${APIRoute.COMMENTS}/${id}`, {comment, rating})\r\n    .then((info) => {\r\n      dispatch(loadComments(info.data));\r\n      dispatch(changeLoadingCommentProcessStatus(false));\r\n      dispatch(showErrorCommentFormMessage(false));\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(true));\r\n      /*\r\n      this additional bottom line was made for clean up a comment form\r\n      and establish \"isCommentFormSendedSuccessfully\" to \"false\"\r\n      to fix problem with save text in comment form after network error\r\n       */\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(showErrorCommentFormMessage(true, err.message));\r\n      dispatch(changeLoadingCommentProcessStatus(false));\r\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\r\n    });\r\n};\r\n\r\nexport const logout = () => (dispatch, _getState, api) => {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('login');\r\n\r\n  api.delete(APIRoute.LOGOUT)\r\n    .then(() => {\r\n      dispatch(userLogout());\r\n    });\r\n};\r\n"],"sourceRoot":""}