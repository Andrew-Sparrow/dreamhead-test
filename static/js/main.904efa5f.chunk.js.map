{"version":3,"sources":["services/api.js","const.js","components/layout/layout.jsx","components/hocs/with-layout.jsx","store/actions.js","util/util.js","store/places/places.js","store/root-reducer.js","store/places/selectors.js","components/tabs/tabs.jsx","components/main-empty/main-empty.jsx","components/main/main.jsx","components/not-found/not-found.jsx","components/loading-screen/loading-screen.jsx","browser-history.js","components/app/app.jsx","store/middlewares/redirect.js","reportWebVitals.js","index.js","store/api-actions.js"],"names":["token","localStorage","getItem","AppRoute","groupList","APIRoute","Layout","props","children","className","withLayout","Component","displayName","ActionType","CHANGE_CITY","LOAD_PLACES","LOAD_NEARBY_PLACES","REMOVE_NEARBY_PLACES","CHANGE_FAVORITE","LOAD_COMMENTS","REMOVE_COMMENTS","CHANGE_LOGIN","LOGOUT","CHANGE_LOADING_COMMENT_PROCESS_STATUS","SHOW_COMMENT_ERROR_MESSAGE","SEND_COMMENT","SEND_COMMENT_RATING","CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS","RESET_FAVORITES","REDIRECT_TO_ROUTE","changeCity","createAction","isLoading","payload","isCommentSendedSuccessfully","isShowErrorMessage","errorMessageText","cityName","changeSortBy","CHANGE_SORT_BY","sortByValue","loadPlaces","places","loadNearbyPlaces","nearbyPlaces","removeNearbyPlaces","changeLogin","comments","login","changeFavorite","id","newPlace","resetFavorites","url","Util","offerFromServer","adaptedOfferForClient","Object","assign","host","avatarUrl","avatar_url","isPro","is_pro","isFavorite","is_favorite","isPremium","is_premium","maxAdults","max_adults","previewImage","preview_image","placesFromServer","map","place","adaptToClient","commentFromServer","adaptedCommentForClient","comment","date","rating","user","name","favoritePlaces","Map","forEach","has","city","set","get","push","activeCity","filter","item","listLength","Array","fill","nanoid","adaptedPlaceForClient","this","newPlaces","index","findIndex","commonPlaces","nearbyPlacesLinks","nearbyPlace","indexFromCommonPlaces","commonPlace","dispatch","formatDate","dateString","Date","toLocaleDateString","year","month","createReducer","isDataLoaded","activeGroupName","builder","addCase","state","action","sortBy","isNearbyPlacesLoaded","getUpdatedPlaces","resetFavoriteStates","NameSpace","combineReducers","getContacts","getIsDataLoaded","getActiveGroupName","Tabs","useSelector","useDispatch","handleTabClick","evt","preventDefault","currentTarget","dataset","group","to","onClick","MainEmpty","withLayoutMain","filteredPlaces","getFilteredPlaces","length","withLayoutNotFound","style","margin","width","textAlign","LoadingScreen","browserHistory","createBrowserHistory","App","history","exact","path","redirect","_store","next","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","api","axiosInstance","axios","create","baseURL","timeout","headers","interceptors","response","use","getAxiosInstance","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","thunk","extraArgument","concat","getIsTokenExist","_getState","data","adaptedPlacesToClient","adaptPlacesToClient","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAKMA,EAA0C,OAAlCC,aAAaC,QAAQ,SAAoBD,aAAaC,QAAQ,SAAW,G,OCL1EC,EACL,IAKKC,EAAY,CACvB,MACA,YACA,SACA,QAGWC,EACH,U,eCaKC,MAxBf,SAAgBC,GACd,IAAOC,EAAuBD,EAAvBC,SAAUC,EAAaF,EAAbE,UAEjB,OACE,sBAAKA,UAAWA,EAAhB,UACE,wBAAQA,UAAU,SAAlB,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,eAAf,SACE,kDAKPD,MCdDE,EAAa,SAACC,EAAWF,GAAZ,OACjB,SAAiBF,GACf,OACE,cAAC,EAAD,CAAQE,UAAWA,EAAnB,SACE,cAACE,EAAD,eAAeJ,QAKvBG,EAAWE,YAAc,aAEVF,Q,QCZFG,EAAa,CACxBC,YAAa,oBACbC,YAAa,oBACbC,mBAAoB,0BACpBC,qBAAsB,4BACtBC,gBAAiB,oBACjBC,cAAe,wBACfC,gBAAiB,0BACjBC,aAAc,mBACdC,OAAQ,cACRC,sCAAuC,4CACvCC,2BAA4B,sCAC5BC,aAAc,sBACdC,oBAAqB,4BACrBC,0CAA2C,+CAC3CC,gBAAiB,wBACjBC,kBAAmB,0BAkBRC,GAfoCC,YAC/ClB,EAAWU,uCACX,SAACS,GAAD,MAAgB,CAACC,QAASD,MAG2BD,YACrDlB,EAAWc,2CACX,SAACO,GAAD,MAAkC,CAACD,QAASC,MAGHH,YACzClB,EAAWW,4BACX,SAACW,EAAoBC,GAArB,MAA2C,CAACH,QAAS,CAACE,qBAAoBC,wBAGlDL,YACxBlB,EAAWC,aACX,SAACuB,GAAD,MAAe,CAACJ,QAASI,OAGdC,EAAeP,YAC1BlB,EAAW0B,gBACX,SAACC,GAAD,MAAkB,CAACP,QAASO,MAGjBC,EAAaV,YACxBlB,EAAWE,aACX,SAAC2B,GAAD,MAAa,CAACT,QAASS,MAGZC,EAAmBZ,YAC9BlB,EAAWG,oBACX,SAAC4B,GAAD,MAAmB,CAACX,QAASW,MAGlBC,EAAqBd,YAAalB,EAAWI,sBAS7C6B,GAPef,YAC1BlB,EAAWM,eACX,SAAC4B,GAAD,MAAe,CAACd,QAASc,MAGGhB,YAAalB,EAAWO,iBAE3BW,YACzBlB,EAAWQ,cACX,SAAC2B,GAAD,MAAY,CAACf,QAASe,OAGXC,EAAiBlB,YAC5BlB,EAAWK,iBACX,SAACgC,EAAIC,GAAL,MAAmB,CAAClB,QAAS,CAACiB,KAAIC,gBAKvBC,GAFSrB,YAAalB,EAAWS,QAEhBS,YAC5BlB,EAAWe,iBACX,SAACc,GAAD,MAAa,CAACT,QAASS,O,GAGMX,YAC7BlB,EAAWgB,mBACX,SAACwB,GAAD,MAAU,CAACpB,QAASoB,M,wDChFhBC,E,kGACJ,SAAqBC,GACnB,IAAMC,EAAwBC,OAAOC,OACnC,GACAH,EACA,CACEI,KAAMF,OAAOC,OACX,GACAH,EAAgBI,KAChB,CACEC,UAAWL,EAAgBI,KAAKE,WAChCC,MAAOP,EAAgBI,KAAKI,SAGhCC,WAAYT,EAAgBU,YAC5BC,UAAWX,EAAgBY,WAC3BC,UAAWb,EAAgBc,WAC3BC,aAAcf,EAAgBgB,gBAalC,cAROf,EAAsBG,KAAKE,kBAC3BL,EAAsBG,KAAKI,cAE3BP,EAAsBS,mBACtBT,EAAsBW,kBACtBX,EAAsBa,kBACtBb,EAAsBe,cAEtBf,I,iCAGT,SAA2BgB,GAAmB,IAAD,OAC3C,OAAOA,EAAiBC,KAAI,SAACC,GAAD,OAAW,EAAKC,cAAcD,Q,kCAG5D,SAA4BE,GAC1B,IAAMC,EAA0BpB,OAAOC,OACrC,GACAkB,EACA,CACEE,QAASF,EAAkBE,QAC3BC,KAAMH,EAAkBG,KACxB7B,GAAI0B,EAAkB1B,GACtB8B,OAAQJ,EAAkBI,OAC1BC,KAAMxB,OAAOC,OACX,GACAkB,EAAkBK,KAClB,CACErB,UAAWgB,EAAkBK,KAAKpB,WAClCC,MAAOc,EAAkBK,KAAKlB,OAC9Bb,GAAI0B,EAAkBK,KAAK/B,GAC3BgC,KAAMN,EAAkBK,KAAKC,SAUrC,cAHOL,EAAwBI,KAAKpB,kBAC7BgB,EAAwBI,KAAKlB,OAE7Bc,I,8CAGT,SAAwCnC,GACtC,IAAMyC,EAAiB,IAAIC,IAa3B,OAXA1C,EAAO2C,SAAQ,SAACX,GACVA,EAAMV,aACJmB,EAAeG,IAAIZ,EAAMa,KAAKL,OAGhCC,EAAeK,IAAId,EAAMa,KAAKL,KAAM,IAFpCC,EAAeM,IAAIf,EAAMa,KAAKL,MAAMQ,KAAKhB,OAQxCS,I,+BAGT,SAAyBQ,EAAYjD,GAGnC,OADiBA,EAAOkD,QAAO,SAACC,GAAD,OAAUA,EAAKN,KAAKL,OAASS,O,4BAU9D,SAAsBG,GAGpB,OAFa,IAAIC,MAAMD,GAAYE,KAAK,IACXvB,KAAI,kBAAMwB,IAAO,S,8BAIhD,SAAwB/C,EAAIR,EAAQS,GAClC,IAAM+C,EAAwBC,KAAKxB,cAAcxB,GAC3CiD,EAAS,YAAO1D,GAChB2D,EAAQD,EAAUE,WAAU,SAAC5B,GAAD,OAAWA,EAAMxB,KAAOA,KAE1D,OADAkD,EAAUC,GAAOrC,WAAakC,EAAsBlC,WAC7CoC,I,6CAGT,SAAuCxD,EAAc2D,GACnD,IAAMC,EAAoB,GAO1B,OALA5D,EAAayC,SAAQ,SAACoB,GACpB,IAAMC,EAAwBH,EAAaD,WAAU,SAACK,GAAD,OAAiBA,EAAYzD,KAAOuD,EAAYvD,MACrGsD,EAAkBd,KAAKa,EAAaG,OAG/BF,I,iCAGT,SAA2B9D,GACzB,OAAOA,EAAO+B,KAAI,SAACC,GAEjB,OADAA,EAAK,2BAAOA,GAAP,IAAcV,YAAY,S,6BAKnC,SAAuB4C,GACiB,OAAlC3G,aAAaC,QAAQ,UACvB0G,EAAS9D,EAAY7C,aAAaC,QAAQ,e,KAjI1CoD,EAyFGuD,WAAa,SAACC,GAGnB,OAAQ,IAAIC,KAAKD,GAAaE,mBAAmB,QAF5B,CAACC,KAAM,UAAWC,MAAO,WA4CnC5D,QCvHTZ,EAASyE,YANM,CACnBzE,OAAQ,GACR0E,cAAc,EACdC,gBAAiB,QAGwB,SAACC,GAC1CA,EACGC,QAAQzF,GAAY,SAAC0F,EAAOC,GAC3BD,EAAMH,gBAAkBI,EAAOxF,WAEhCsF,QAAQjF,GAAc,SAACkF,EAAOC,GAC7BD,EAAME,OAASD,EAAOxF,WAEvBsF,QAAQ9E,GAAY,SAAC+E,EAAOC,GAC3BD,EAAM9E,OAAS+E,EAAOxF,QACtBuF,EAAMJ,cAAe,KAEtBG,QAAQ5E,GAAkB,SAAC6E,EAAOC,GACjCD,EAAM5E,aAAe6E,EAAOxF,QAC5BuF,EAAMG,sBAAuB,KAE9BJ,QAAQ1E,GAAoB,SAAC2E,GAC5BA,EAAM5E,aAAe,GACrB4E,EAAMG,sBAAuB,KAE9BJ,QAAQtE,GAAgB,SAACuE,EAAOC,GAC/BD,EAAM9E,OAASY,EAAKsE,iBAAiBH,EAAOxF,QAAQiB,GAAIsE,EAAM9E,OAAQ+E,EAAOxF,QAAQkB,aAEtFoE,QAAQnE,GAAgB,SAACoE,EAAOC,GAC/BD,EAAM9E,OAASY,EAAKuE,oBAAoBJ,EAAOxF,eCxCxC6F,EACD,WAGGC,cAAgB,eAC5BD,EAAqBpF,ICNXsF,EAAc,SAACR,GAAD,OAAWA,EAAMM,GAAoBpF,QACnDuF,EAAkB,SAACT,GAAD,OAAWA,EAAMM,GAAoBV,cACvDc,EAAqB,SAACV,GAAD,OAAWA,EAAMM,GAAoBT,iBCmCxDc,MA/Bf,SAAc5H,GACZ,IAAM8G,EAAkBe,YAAYF,GAC9BtB,EAAWyB,cAEXC,EAAiB,SAACC,GACtBA,EAAIC,iBACJ5B,EAAS9E,EAAWyG,EAAIE,cAAcC,QAAQnD,QAGhD,OACE,qBAAK9E,UAAU,OAAf,SACE,yBAASA,UAAU,sBAAnB,SACE,oBAAIA,UAAU,6BAAd,SACGL,EAAUqE,KAAI,SAACkE,GAAD,OACb,oBAAIlI,UAAU,kBAAd,SACE,cAAC,IAAD,CACE,YAAWkI,EACXlI,UAAS,0CAAsCkI,IAAUtB,GAAmB,sBAC5EuB,GAAG,IACHC,QAASP,EAJX,SAME,+BAAOK,OAP0BA,aCGlCG,MAtBf,SAAmBvI,GACjB,IAAO8G,EAAmB9G,EAAnB8G,gBAEP,OACE,qBAAK5G,UAAU,SAAf,SACE,sBAAKA,UAAU,qEAAf,UACE,yBAASA,UAAU,oBAAnB,SACE,sBAAKA,UAAU,uCAAf,UACE,mBAAGA,UAAU,iBAAb,mCACA,oBAAGA,UAAU,6BAAb,wEAAsG4G,EAAtG,kBAGJ,qBAAK5G,UAAU,gCCwBvB,IACesI,EADQrI,GA7BvB,WACE,IAAM2G,EAAkBe,YAAYF,GAC9BxF,EAAS0F,YAAYJ,GAErBgB,EAAiB1F,EAAK2F,kBAAkB5B,EAAiB3E,GAE/D,OACE,uBAAMjC,UAAU,+BAAhB,UACE,oBAAIA,UAAU,kBAAd,oBACA,cAAC,EAAD,IAE4B,IAA1BuI,EAAeE,OACX,cAAC,EAAD,CAAW7B,gBAAiBA,IAE5B,qBAAK5G,UAAU,SAAf,SACE,qBAAKA,UAAU,qCAAf,SACE,0BAASA,UAAU,wBAAnB,UACE,oBAAIA,UAAU,kBAAd,oBACA,oBAAGA,UAAU,gBAAb,UAA8BuI,EAAeE,OAA7C,sBAAwE7B,kBChB1F,IACe8B,EADYzI,GAT3B,WACE,OACE,sBAAK0I,MAAO,CAACC,OAAQ,OAAQC,MAAO,SAApC,UACE,oBAAIF,MAAO,CAACG,UAAW,UAAvB,iBACA,sDCCSC,MANf,WACE,OACE,4C,OCAWC,EAFQC,cCgCRC,MAvBf,WAGE,OAFqBvB,YAAYH,GAS/B,cAAC,IAAD,CAAe2B,QAASH,EAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAM3J,EAAnB,SACE,cAAC,EAAD,CAAMM,UAAU,kCAElB,cAAC,IAAD,UACE,cAAC,EAAD,WAXJ,cAAC,EAAD,KCbOsJ,GAAW,SAACC,GAAD,OAAY,SAACC,GAAD,OAAU,SAACxC,GAK7C,OAJIA,EAAOyC,OAASrJ,EAAWgB,mBAC7B4H,EAAe/D,KAAK+B,EAAOxF,SAGtBgI,EAAKxC,MCIC0C,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCORQ,GlBP0B,WAC9B,IAAMC,EAAgBC,IAAMC,OAAO,CACjCC,QAPgB,2CAQhBC,QAPoB,IAQpBC,QAAS,CACP,UAAWlL,KAUf,OAFA6K,EAAcM,aAAaC,SAASC,KAJlB,SAACD,GAAD,OAAcA,KAEjB,eAIRP,EkBRGS,GAENC,GAAQC,YAAe,CAC3BC,QAASC,EACTC,WAAY,SAACC,GAAD,OACVA,EAAqB,CACnBC,MAAO,CACLC,cAAelB,MAEhBmB,OAAOhC,OAGdzG,EAAK0I,gBAAgBT,GAAM3E,UAC3B2E,GAAM3E,UCX+B,SAACA,EAAUqF,EAAWrB,GAAtB,OACnCA,EAAInF,IAAIpF,GACLiK,MAAK,YAAa,IAAX4B,EAAU,EAAVA,KACAC,EAAwB7I,EAAK8I,oBAAoBF,GACvDtF,EAASnE,EAAW0J,OAErBE,OAAM,SAACC,UDOZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlB,MAAOA,GAAjB,SACE,cAAC,EAAD,QAGJmB,SAASC,eAAe,SAK1BxC,O","file":"static/js/main.904efa5f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BACKEND_URL = 'https://7.react.pages.academy/six-cities';\nconst REQUEST_TIMEOUT = 5000;\n\nconst token = localStorage.getItem('token') !== null ? localStorage.getItem('token') : '';\n\nexport const getAxiosInstance = () => {\n  const axiosInstance = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n    headers: {\n      'x-token': token,\n    },\n  });\n\n  const onSuccess = (response) => response;\n\n  const onFail = () => {};\n\n  axiosInstance.interceptors.response.use(onSuccess, onFail);\n\n  return axiosInstance;\n};\n","export const AppRoute = {\n  MAIN: '/',\n};\n\nexport const MAX_COMMENTS_AMOUNT = 10;\n\nexport const groupList = [\n  'All',\n  'Favorites',\n  'Family',\n  'Work',\n];\n\nexport const APIRoute = {\n  HOTELS: '/hotels',\n  FAVORITE: '/favorite',\n  COMMENTS: '/comments',\n  LOGIN: '/login',\n  LOGOUT: '/logout',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Layout(props) {\n  const {children, className} = props;\n\n  return (\n    <div className={className}>\n      <header className=\"header\">\n        <div className=\"container\">\n          <div className=\"header__wrapper\">\n            <div className=\"header__left\">\n              <h2>Contacts</h2>\n            </div>\n          </div>\n        </div>\n      </header>\n      {children}\n    </ div>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.object,\n  className: PropTypes.string,\n};\n\nexport default Layout;\n","import React from 'react';\nimport Layout from '../layout/layout';\n\nconst withLayout = (Component, className) =>\n  function wrapper(props) {\n    return (\n      <Layout className={className}>\n        <Component {...props} />\n      </Layout>\n    );\n  };\n\nwithLayout.displayName = 'withLayout';\n\nexport default withLayout;\n","import {createAction} from '@reduxjs/toolkit';\n\nexport const ActionType = {\n  CHANGE_CITY: 'places/changeCity',\n  LOAD_PLACES: 'places/loadPlaces',\n  LOAD_NEARBY_PLACES: 'places/loadNearbyPlaces',\n  REMOVE_NEARBY_PLACES: 'places/removeNearbyPlaces',\n  CHANGE_FAVORITE: 'places/isFavorite',\n  LOAD_COMMENTS: 'comments/loadComments',\n  REMOVE_COMMENTS: 'comments/removeComments',\n  CHANGE_LOGIN: 'user/changeLogin',\n  LOGOUT: 'user/logout',\n  CHANGE_LOADING_COMMENT_PROCESS_STATUS: 'comment/changeLoadingCommentProcessStatus',\n  SHOW_COMMENT_ERROR_MESSAGE: 'comment/showErrorCommentFormMessage',\n  SEND_COMMENT: 'comment/sendComment',\n  SEND_COMMENT_RATING: 'comment/sendCommentRating',\n  CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS: 'comment/changeCommentSendedSuccessfulyStatus',\n  RESET_FAVORITES: 'places/resetFavorites',\n  REDIRECT_TO_ROUTE: 'places/redirectToRoute',\n};\n\nexport const changeLoadingCommentProcessStatus = createAction(\n  ActionType.CHANGE_LOADING_COMMENT_PROCESS_STATUS,\n  (isLoading) => ({payload: isLoading}),\n);\n\nexport const changeIsCommentSendedSuccessfullyStatus = createAction(\n  ActionType.CHANGE_COMMENT_SENDED_SUCCESSFULLY_STATUS,\n  (isCommentSendedSuccessfully) => ({payload: isCommentSendedSuccessfully}),\n);\n\nexport const showErrorCommentFormMessage = createAction(\n  ActionType.SHOW_COMMENT_ERROR_MESSAGE,\n  (isShowErrorMessage, errorMessageText) => ({payload: {isShowErrorMessage, errorMessageText}}),\n);\n\nexport const changeCity = createAction(\n  ActionType.CHANGE_CITY,\n  (cityName) => ({payload: cityName}),\n);\n\nexport const changeSortBy = createAction(\n  ActionType.CHANGE_SORT_BY,\n  (sortByValue) => ({payload: sortByValue}),\n);\n\nexport const loadPlaces = createAction(\n  ActionType.LOAD_PLACES,\n  (places) => ({payload: places}),\n);\n\nexport const loadNearbyPlaces = createAction(\n  ActionType.LOAD_NEARBY_PLACES,\n  (nearbyPlaces) => ({payload: nearbyPlaces}),\n);\n\nexport const removeNearbyPlaces = createAction(ActionType.REMOVE_NEARBY_PLACES);\n\nexport const loadComments = createAction(\n  ActionType.LOAD_COMMENTS,\n  (comments) => ({payload: comments}),\n);\n\nexport const removeComments = createAction(ActionType.REMOVE_COMMENTS);\n\nexport const changeLogin = createAction(\n  ActionType.CHANGE_LOGIN,\n  (login) => ({payload: login}),\n);\n\nexport const changeFavorite = createAction(\n  ActionType.CHANGE_FAVORITE,\n  (id, newPlace) => ({payload: {id, newPlace}}),\n);\n\nexport const logout = createAction(ActionType.LOGOUT);\n\nexport const resetFavorites = createAction(\n  ActionType.RESET_FAVORITES,\n  (places) => ({payload: places}),\n);\n\nexport const redirectToRoute = createAction(\n  ActionType.REDIRECT_TO_ROUTE,\n  (url) => ({payload: url}),\n);\n","import nanoid from 'nanoid';\n\nimport {changeLogin} from '../store/actions';\n\nclass Util {\n  static adaptToClient(offerFromServer) {\n    const adaptedOfferForClient = Object.assign(\n      {},\n      offerFromServer,\n      {\n        host: Object.assign(\n          {},\n          offerFromServer.host,\n          {\n            avatarUrl: offerFromServer.host.avatar_url,\n            isPro: offerFromServer.host.is_pro,\n          },\n        ),\n        isFavorite: offerFromServer.is_favorite,\n        isPremium: offerFromServer.is_premium,\n        maxAdults: offerFromServer.max_adults,\n        previewImage: offerFromServer.preview_image,\n      },\n    );\n\n    // Ненужные ключи мы удаляем\n    delete adaptedOfferForClient.host.avatar_url;\n    delete adaptedOfferForClient.host.is_pro;\n\n    delete adaptedOfferForClient.is_favorite;\n    delete adaptedOfferForClient.is_premium;\n    delete adaptedOfferForClient.max_adults;\n    delete adaptedOfferForClient.preview_image;\n\n    return adaptedOfferForClient;\n  }\n\n  static adaptPlacesToClient(placesFromServer) {\n    return placesFromServer.map((place) => this.adaptToClient(place));\n  }\n\n  static adaptCommentToClient(commentFromServer) {\n    const adaptedCommentForClient = Object.assign(\n      {},\n      commentFromServer,\n      {\n        comment: commentFromServer.comment,\n        date: commentFromServer.date,\n        id: commentFromServer.id,\n        rating: commentFromServer.rating,\n        user: Object.assign(\n          {},\n          commentFromServer.user,\n          {\n            avatarUrl: commentFromServer.user.avatar_url,\n            isPro: commentFromServer.user.is_pro,\n            id: commentFromServer.user.id,\n            name: commentFromServer.user.name,\n          },\n        ),\n      },\n    );\n\n    // Ненужные ключи мы удаляем\n    delete adaptedCommentForClient.user.avatar_url;\n    delete adaptedCommentForClient.user.is_pro;\n\n    return adaptedCommentForClient;\n  }\n\n  static getFavoritePlacesSeparatedByCity(places) {\n    const favoritePlaces = new Map();\n\n    places.forEach((place) => {\n      if (place.isFavorite) {\n        if (favoritePlaces.has(place.city.name)) {\n          favoritePlaces.get(place.city.name).push(place);\n        } else {\n          favoritePlaces.set(place.city.name, []);\n          favoritePlaces.get(place.city.name).push(place);\n        }\n      }\n    });\n\n    return favoritePlaces;\n  }\n\n  static getFilteredPlaces(activeCity, places) {\n    let filteredPlaces = [];\n    filteredPlaces = places.filter((item) => item.city.name === activeCity);\n    return filteredPlaces;\n  }\n\n  static formatDate = (dateString) => {\n    const DATE_OPTIONS = {year: 'numeric', month: 'short'};\n\n    return (new Date(dateString)).toLocaleDateString('en-US', DATE_OPTIONS);\n  }\n\n  static generateIdKeys(listLength) {\n    const list = new Array(listLength).fill('');\n    const generatedIdList = list.map(() => nanoid(10));\n    return generatedIdList;\n  }\n\n  static getUpdatedPlaces(id, places, newPlace) {\n    const adaptedPlaceForClient = this.adaptToClient(newPlace);\n    const newPlaces = [...places];\n    const index = newPlaces.findIndex((place) => place.id === id);\n    newPlaces[index].isFavorite = adaptedPlaceForClient.isFavorite;\n    return newPlaces;\n  }\n\n  static getNearbyPlacesFromCommonPlaces(nearbyPlaces, commonPlaces) {\n    const nearbyPlacesLinks = [];\n\n    nearbyPlaces.forEach((nearbyPlace) => {\n      const indexFromCommonPlaces = commonPlaces.findIndex((commonPlace) => commonPlace.id === nearbyPlace.id);\n      nearbyPlacesLinks.push(commonPlaces[indexFromCommonPlaces]);\n    });\n\n    return nearbyPlacesLinks;\n  }\n\n  static resetFavoriteStates(places) {\n    return places.map((place) => {\n      place = {...place, isFavorite: false};\n      return place;\n    });\n  }\n\n  static getIsTokenExist(dispatch) {\n    if (localStorage.getItem('token') !== null) {\n      dispatch(changeLogin(localStorage.getItem('login')));\n    }\n  }\n}\n\nexport default Util;\n","import {createReducer} from '@reduxjs/toolkit';\nimport Util from '../../util/util';\n\nimport {\n  changeCity,\n  changeSortBy,\n  loadPlaces,\n  loadNearbyPlaces,\n  removeNearbyPlaces,\n  changeFavorite,\n  resetFavorites\n} from '../actions';\n\nconst initialState = {\n  places: [],\n  isDataLoaded: false,\n  activeGroupName: 'All',\n};\n\nconst places = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeCity, (state, action) => {\n      state.activeGroupName = action.payload;\n    })\n    .addCase(changeSortBy, (state, action) => {\n      state.sortBy = action.payload;\n    })\n    .addCase(loadPlaces, (state, action) => {\n      state.places = action.payload;\n      state.isDataLoaded = true;\n    })\n    .addCase(loadNearbyPlaces, (state, action) => {\n      state.nearbyPlaces = action.payload;\n      state.isNearbyPlacesLoaded = true;\n    })\n    .addCase(removeNearbyPlaces, (state) => {\n      state.nearbyPlaces = [];\n      state.isNearbyPlacesLoaded = false;\n    })\n    .addCase(changeFavorite, (state, action) => {\n      state.places = Util.getUpdatedPlaces(action.payload.id, state.places, action.payload.newPlace);\n    })\n    .addCase(resetFavorites, (state, action) => {\n      state.places = Util.resetFavoriteStates(action.payload);\n    });\n});\n\nexport {places};\n","import {combineReducers} from 'redux';\nimport {places} from './places/places';\n\nexport const NameSpace = {\n  CONTACTS: 'CONTACTS',\n};\n\nexport default combineReducers({\n  [NameSpace.CONTACTS]: places,\n});\n","import {NameSpace} from '../root-reducer';\n\nexport const getContacts = (state) => state[NameSpace.CONTACTS].places;\nexport const getIsDataLoaded = (state) => state[NameSpace.CONTACTS].isDataLoaded;\nexport const getActiveGroupName = (state) => state[NameSpace.CONTACTS].activeGroupName;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {groupList} from '../../const';\nimport {changeCity} from '../../store/actions';\nimport {getActiveGroupName} from '../../store/places/selectors';\n\nfunction Tabs(props) {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const dispatch = useDispatch();\n\n  const handleTabClick = (evt) => {\n    evt.preventDefault();\n    dispatch(changeCity(evt.currentTarget.dataset.city));\n  };\n\n  return (\n    <div className=\"tabs\">\n      <section className=\"locations container\">\n        <ul className=\"locations__list tabs__list\">\n          {groupList.map((group) => (\n            <li className=\"locations__item\" key={group}>\n              <Link\n                data-city={group}\n                className={`locations__item-link tabs__item ${ group === activeGroupName && 'tabs__item--active' }`}\n                to=\"#\"\n                onClick={handleTabClick}\n              >\n                <span>{group}</span>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Tabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction MainEmpty(props) {\n  const {activeGroupName} = props;\n\n  return (\n    <div className=\"cities\">\n      <div className=\"cities__places-container cities__places-container--empty container\">\n        <section className=\"cities__no-places\">\n          <div className=\"cities__status-wrapper tabs__content\">\n            <b className=\"cities__status\">No contacts available</b>\n            <p className=\"cities__status-description\">We could not find any contacts available at the moment in \"{activeGroupName}\" group</p>\n          </div>\n        </section>\n        <div className=\"cities__right-section\" />\n      </div>\n    </div>\n  );\n}\n\nMainEmpty.propTypes = {\n  activeGroupName: PropTypes.string.isRequired,\n};\n\nexport default MainEmpty;\n","import {React} from 'react';\nimport {useSelector} from 'react-redux';\n\n// import RoomList from '../room-list/room-list';\nimport withLayout from '../hocs/with-layout';\nimport Tabs from '../tabs/tabs';\nimport Util from '../../util/util';\nimport MainEmpty from '../main-empty/main-empty';\nimport {getContacts, getActiveGroupName} from '../../store/places/selectors';\n\nfunction Main() {\n  const activeGroupName = useSelector(getActiveGroupName);\n  const places = useSelector(getContacts);\n\n  const filteredPlaces = Util.getFilteredPlaces(activeGroupName, places);\n\n  return (\n    <main className=\"page__main page__main--index\">\n      <h1 className=\"visually-hidden\">Cities</h1>\n      <Tabs />\n      {\n        filteredPlaces.length === 0\n          ? <MainEmpty activeGroupName={activeGroupName}/>\n          : (\n            <div className=\"cities\">\n              <div className=\"cities__places-container container\">\n                <section className=\"cities__places places\">\n                  <h2 className=\"visually-hidden\">Places</h2>\n                  <b className=\"places__found\">{filteredPlaces.length} places to stay in {activeGroupName}</b>\n                  {/* <RoomList places={filteredPlaces} /> */}\n                </section>\n              </div>\n            </div>\n          )\n      }\n    </main>\n  );\n}\n\nconst withLayoutMain = withLayout(Main);\nexport default withLayoutMain;\n","import React from 'react';\nimport withLayout from '../hocs/with-layout';\n\nfunction NotFound() {\n  return (\n    <div style={{margin: 'auto', width: '200px'}}>\n      <h1 style={{textAlign: 'center'}}>404</h1>\n      <h2>Page Not Found</h2>\n    </div>\n  );\n}\n\nconst withLayoutNotFound = withLayout(NotFound);\nexport default withLayoutNotFound;\n","import React from 'react';\n\nfunction LoadingScreen() {\n  return (\n    <p>Loading...</p>\n  );\n}\n\nexport default LoadingScreen;\n","import {createBrowserHistory} from 'history';\n\nconst browserHistory = createBrowserHistory();\n\nexport default browserHistory;\n","import React from 'react';\nimport {useSelector} from 'react-redux';\nimport {Switch, Route, Router as BrowserRouter} from 'react-router-dom';\n\nimport {AppRoute} from '../../const';\nimport Main from '../main/main';\nimport Error from '../not-found/not-found';\nimport LoadingScreen from '../loading-screen/loading-screen';\nimport browserHistory from '../../browser-history';\nimport {getIsDataLoaded} from '../../store/places/selectors';\n\nfunction App() {\n  const isDataLoaded = useSelector(getIsDataLoaded);\n\n  if (!isDataLoaded) {\n    return (\n      <LoadingScreen />\n    );\n  }\n\n  return (\n    <BrowserRouter history={browserHistory}>\n      <Switch>\n        <Route exact path={AppRoute.MAIN}>\n          <Main className=\"page page--gray page--index\" />\n        </Route>\n        <Route>\n          <Error />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import browserHistory from '../../browser-history';\nimport {ActionType} from '../actions';\n\nexport const redirect = (_store) => (next) => (action) => {\n  if (action.type === ActionType.REDIRECT_TO_ROUTE) {\n    browserHistory.push(action.payload);\n  }\n\n  return next(action);\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {configureStore} from '@reduxjs/toolkit';\nimport {Provider} from 'react-redux';\n\nimport {getAxiosInstance} from './services/api';\nimport App from './components/app/app';\nimport rootReducer from './store/root-reducer';\nimport {fetchPlacesList} from './store/api-actions';\nimport {redirect} from './store/middlewares/redirect';\nimport Util from './util/util';\nimport reportWebVitals from './reportWebVitals';\n\nconst api = getAxiosInstance();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: {\n        extraArgument: api,\n      },\n    }).concat(redirect),\n});\n\nUtil.getIsTokenExist(store.dispatch);\nstore.dispatch(fetchPlacesList());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n  changeLoadingCommentProcessStatus,\n  changeIsCommentSendedSuccessfullyStatus,\n  showErrorCommentFormMessage,\n  loadPlaces,\n  loadNearbyPlaces,\n  loadComments,\n  changeLogin,\n  changeFavorite,\n  logout as userLogout,\n  redirectToRoute\n} from './actions';\n\nimport {APIRoute, AppRoute} from '../const';\nimport Util from '../util/util';\n\nexport const fetchPlacesList = () => (dispatch, _getState, api) => (\n  api.get(APIRoute.HOTELS)\n    .then(({data}) => {\n      const adaptedPlacesToClient = Util.adaptPlacesToClient(data);\n      dispatch(loadPlaces(adaptedPlacesToClient));\n    })\n    .catch((err) => {})\n);\n\nexport const fetchNearbyPlacesList = (id) => (dispatch, _getState, api) => (\n  api.get(`${APIRoute.HOTELS }/${ id }/nearby`)\n    .then(({data}) => {\n      const adaptedPlacesToClient = Util.adaptPlacesToClient(data);\n      dispatch(loadNearbyPlaces(adaptedPlacesToClient));\n    })\n    .catch((err) => {})\n);\n\nexport const fetchCommentsList = (id) => (dispatch, _getState, api) => (\n  api.get(`${APIRoute.COMMENTS }/${id}`)\n    .then((info) => {\n      dispatch(loadComments(info.data));\n    })\n    .catch((err) => {})\n);\n\nexport const addToFavorite = (id, isFavorite) => (dispatch, _getState, api) => (\n  api.post(`${APIRoute.FAVORITE }/${id}/${isFavorite ? 1 : 0}`)\n    .then((info) => {\n      dispatch(changeFavorite(id, info.data));\n    })\n    .catch((err) => {})\n);\n\nexport const login = ({login: email, password}) => (dispatch, _getState, api) => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('login');\n  api.post(APIRoute.LOGIN, {email, password})\n    .then((info) => {\n      localStorage.setItem('token', info.data.token);\n      localStorage.setItem('login', info.data.email);\n      dispatch(changeLogin(info.data.email));\n      dispatch(redirectToRoute(AppRoute.MAIN));\n    })\n    .catch((err) => {});\n};\n\nexport const sendComment = (id, comment, rating) => (dispatch, _getState, api) => {\n  dispatch(changeLoadingCommentProcessStatus(true));\n\n  api.post(`${APIRoute.COMMENTS}/${id}`, {comment, rating})\n    .then((info) => {\n      dispatch(loadComments(info.data));\n      dispatch(changeLoadingCommentProcessStatus(false));\n      dispatch(showErrorCommentFormMessage(false));\n      dispatch(changeIsCommentSendedSuccessfullyStatus(true));\n      /*\n      this additional bottom line was made for clean up a comment form\n      and establish \"isCommentFormSendedSuccessfully\" to \"false\"\n      to fix problem with save text in comment form after network error\n       */\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\n    })\n    .catch((err) => {\n      dispatch(showErrorCommentFormMessage(true, err.message));\n      dispatch(changeLoadingCommentProcessStatus(false));\n      dispatch(changeIsCommentSendedSuccessfullyStatus(false));\n    });\n};\n\nexport const logout = () => (dispatch, _getState, api) => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('login');\n\n  api.delete(APIRoute.LOGOUT)\n    .then(() => {\n      dispatch(userLogout());\n    });\n};\n"],"sourceRoot":""}